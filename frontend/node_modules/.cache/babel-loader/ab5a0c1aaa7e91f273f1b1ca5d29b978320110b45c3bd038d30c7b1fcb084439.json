{"ast":null,"code":"/**\n * 认证相关工具函数\n */\n\nconst TOKEN_KEY = 'access_token';\nconst REFRESH_TOKEN_KEY = 'refresh_token';\n\n/**\n * 获取访问令牌\n * @returns {string|null} 访问令牌\n */\nexport function getToken() {\n  return localStorage.getItem(TOKEN_KEY);\n}\n\n/**\n * 设置访问令牌\n * @param {string} token - 访问令牌\n */\nexport function setToken(token) {\n  localStorage.setItem(TOKEN_KEY, token);\n}\n\n/**\n * 移除访问令牌\n */\nexport function removeToken() {\n  localStorage.removeItem(TOKEN_KEY);\n}\n\n/**\n * 获取刷新令牌\n * @returns {string|null} 刷新令牌\n */\nexport function getRefreshToken() {\n  return localStorage.getItem(REFRESH_TOKEN_KEY);\n}\n\n/**\n * 设置刷新令牌\n * @param {string} refreshToken - 刷新令牌\n */\nexport function setRefreshToken(refreshToken) {\n  localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);\n}\n\n/**\n * 移除刷新令牌\n */\nexport function removeRefreshToken() {\n  localStorage.removeItem(REFRESH_TOKEN_KEY);\n}\n\n/**\n * 清除所有认证信息\n */\nexport function clearAuth() {\n  removeToken();\n  removeRefreshToken();\n}\n\n/**\n * 检查令牌是否过期\n * @param {string} token - JWT令牌\n * @returns {boolean} 是否过期\n */\nexport function isTokenExpired(token) {\n  if (!token) return true;\n  try {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    const currentTime = Date.now() / 1000;\n    return payload.exp < currentTime;\n  } catch (error) {\n    console.error('解析令牌失败:', error);\n    return true;\n  }\n}\n\n/**\n * 从令牌中获取用户信息\n * @param {string} token - JWT令牌\n * @returns {Object|null} 用户信息\n */\nexport function getUserFromToken(token) {\n  if (!token) return null;\n  try {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    return {\n      username: payload.sub,\n      exp: payload.exp,\n      type: payload.type\n    };\n  } catch (error) {\n    console.error('从令牌获取用户信息失败:', error);\n    return null;\n  }\n}","map":{"version":3,"names":["TOKEN_KEY","REFRESH_TOKEN_KEY","getToken","localStorage","getItem","setToken","token","setItem","removeToken","removeItem","getRefreshToken","setRefreshToken","refreshToken","removeRefreshToken","clearAuth","isTokenExpired","payload","JSON","parse","atob","split","currentTime","Date","now","exp","error","console","getUserFromToken","username","sub","type"],"sources":["/Users/windwheel/Documents/gitrepo/train-storge-workflow/frontend/src/utils/auth.js"],"sourcesContent":["/**\n * 认证相关工具函数\n */\n\nconst TOKEN_KEY = 'access_token'\nconst REFRESH_TOKEN_KEY = 'refresh_token'\n\n/**\n * 获取访问令牌\n * @returns {string|null} 访问令牌\n */\nexport function getToken() {\n  return localStorage.getItem(TOKEN_KEY)\n}\n\n/**\n * 设置访问令牌\n * @param {string} token - 访问令牌\n */\nexport function setToken(token) {\n  localStorage.setItem(TOKEN_KEY, token)\n}\n\n/**\n * 移除访问令牌\n */\nexport function removeToken() {\n  localStorage.removeItem(TOKEN_KEY)\n}\n\n/**\n * 获取刷新令牌\n * @returns {string|null} 刷新令牌\n */\nexport function getRefreshToken() {\n  return localStorage.getItem(REFRESH_TOKEN_KEY)\n}\n\n/**\n * 设置刷新令牌\n * @param {string} refreshToken - 刷新令牌\n */\nexport function setRefreshToken(refreshToken) {\n  localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken)\n}\n\n/**\n * 移除刷新令牌\n */\nexport function removeRefreshToken() {\n  localStorage.removeItem(REFRESH_TOKEN_KEY)\n}\n\n/**\n * 清除所有认证信息\n */\nexport function clearAuth() {\n  removeToken()\n  removeRefreshToken()\n}\n\n/**\n * 检查令牌是否过期\n * @param {string} token - JWT令牌\n * @returns {boolean} 是否过期\n */\nexport function isTokenExpired(token) {\n  if (!token) return true\n  \n  try {\n    const payload = JSON.parse(atob(token.split('.')[1]))\n    const currentTime = Date.now() / 1000\n    \n    return payload.exp < currentTime\n  } catch (error) {\n    console.error('解析令牌失败:', error)\n    return true\n  }\n}\n\n/**\n * 从令牌中获取用户信息\n * @param {string} token - JWT令牌\n * @returns {Object|null} 用户信息\n */\nexport function getUserFromToken(token) {\n  if (!token) return null\n  \n  try {\n    const payload = JSON.parse(atob(token.split('.')[1]))\n    return {\n      username: payload.sub,\n      exp: payload.exp,\n      type: payload.type\n    }\n  } catch (error) {\n    console.error('从令牌获取用户信息失败:', error)\n    return null\n  }\n} "],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,SAAS,GAAG,cAAc;AAChC,MAAMC,iBAAiB,GAAG,eAAe;;AAEzC;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAAA,EAAG;EACzB,OAAOC,YAAY,CAACC,OAAO,CAACJ,SAAS,CAAC;AACxC;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASK,QAAQA,CAACC,KAAK,EAAE;EAC9BH,YAAY,CAACI,OAAO,CAACP,SAAS,EAAEM,KAAK,CAAC;AACxC;;AAEA;AACA;AACA;AACA,OAAO,SAASE,WAAWA,CAAA,EAAG;EAC5BL,YAAY,CAACM,UAAU,CAACT,SAAS,CAAC;AACpC;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASU,eAAeA,CAAA,EAAG;EAChC,OAAOP,YAAY,CAACC,OAAO,CAACH,iBAAiB,CAAC;AAChD;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASU,eAAeA,CAACC,YAAY,EAAE;EAC5CT,YAAY,CAACI,OAAO,CAACN,iBAAiB,EAAEW,YAAY,CAAC;AACvD;;AAEA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAAA,EAAG;EACnCV,YAAY,CAACM,UAAU,CAACR,iBAAiB,CAAC;AAC5C;;AAEA;AACA;AACA;AACA,OAAO,SAASa,SAASA,CAAA,EAAG;EAC1BN,WAAW,CAAC,CAAC;EACbK,kBAAkB,CAAC,CAAC;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,cAAcA,CAACT,KAAK,EAAE;EACpC,IAAI,CAACA,KAAK,EAAE,OAAO,IAAI;EAEvB,IAAI;IACF,MAAMU,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACb,KAAK,CAACc,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;IAErC,OAAOP,OAAO,CAACQ,GAAG,GAAGH,WAAW;EAClC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IAC/B,OAAO,IAAI;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,gBAAgBA,CAACrB,KAAK,EAAE;EACtC,IAAI,CAACA,KAAK,EAAE,OAAO,IAAI;EAEvB,IAAI;IACF,MAAMU,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACb,KAAK,CAACc,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,OAAO;MACLQ,QAAQ,EAAEZ,OAAO,CAACa,GAAG;MACrBL,GAAG,EAAER,OAAO,CAACQ,GAAG;MAChBM,IAAI,EAAEd,OAAO,CAACc;IAChB,CAAC;EACH,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,OAAO,IAAI;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}