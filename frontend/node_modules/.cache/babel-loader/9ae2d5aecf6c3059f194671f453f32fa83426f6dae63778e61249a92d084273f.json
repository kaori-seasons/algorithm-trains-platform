{"ast":null,"code":"import path from 'path-browserify';\nexport default {\n  name: 'SidebarItem',\n  props: {\n    item: {\n      type: Object,\n      required: true\n    },\n    basePath: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    this.onlyOneChild = null;\n    return {};\n  },\n  methods: {\n    hasOneShowingChild(children = [], parent) {\n      const showingChildren = children.filter(item => {\n        if (item.meta && item.meta.hidden) {\n          return false;\n        } else {\n          this.onlyOneChild = item;\n          return true;\n        }\n      });\n      if (showingChildren.length === 1) {\n        return true;\n      }\n      if (showingChildren.length === 0) {\n        this.onlyOneChild = {\n          ...parent,\n          path: '',\n          noShowingChildren: true\n        };\n        return true;\n      }\n      return false;\n    },\n    resolvePath(routePath) {\n      if (this.isExternal(routePath)) {\n        return routePath;\n      }\n      if (this.isExternal(this.basePath)) {\n        return this.basePath;\n      }\n      return path.resolve(this.basePath, routePath);\n    },\n    isExternal(path) {\n      return /^(https?:|mailto:|tel:)/.test(path);\n    },\n    handleLink(item) {\n      const {\n        redirect,\n        path\n      } = item;\n      if (redirect) {\n        this.$router.push(redirect);\n        return;\n      }\n      this.$router.push(path);\n    }\n  }\n};","map":{"version":3,"names":["path","name","props","item","type","Object","required","basePath","String","default","data","onlyOneChild","methods","hasOneShowingChild","children","parent","showingChildren","filter","meta","hidden","length","noShowingChildren","resolvePath","routePath","isExternal","resolve","test","handleLink","redirect","$router","push"],"sources":["src/layout/components/SidebarItem.vue"],"sourcesContent":["<template>\n  <div v-if=\"!item.meta || !item.meta.hidden\">\n    <template v-if=\"!hasOneShowingChild(item.children, item) || (onlyOneChild.children && !onlyOneChild.noShowingChildren) || item.meta && item.meta.alwaysShow\">\n      <el-submenu :index=\"resolvePath(item.path)\" popper-append-to-body>\n        <template slot=\"title\">\n          <i :class=\"item.meta && item.meta.icon\" v-if=\"item.meta && item.meta.icon\"></i>\n          <span v-if=\"item.meta && item.meta.title\">{{ item.meta.title }}</span>\n        </template>\n        <sidebar-item\n          v-for=\"child in item.children\"\n          :key=\"child.path\"\n          :item=\"child\"\n          :base-path=\"resolvePath(child.path)\"\n          class=\"nest-menu\"\n        />\n      </el-submenu>\n    </template>\n    <template v-else>\n      <el-menu-item :index=\"resolvePath(onlyOneChild.path)\" @click=\"handleLink(onlyOneChild)\">\n        <i :class=\"onlyOneChild.meta && onlyOneChild.meta.icon\" v-if=\"onlyOneChild.meta && onlyOneChild.meta.icon\"></i>\n        <span v-if=\"onlyOneChild.meta && onlyOneChild.meta.title\">{{ onlyOneChild.meta.title }}</span>\n      </el-menu-item>\n    </template>\n  </div>\n</template>\n\n<script>\nimport path from 'path-browserify'\n\nexport default {\n  name: 'SidebarItem',\n  props: {\n    item: {\n      type: Object,\n      required: true\n    },\n    basePath: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    this.onlyOneChild = null\n    return {}\n  },\n  methods: {\n    hasOneShowingChild(children = [], parent) {\n      const showingChildren = children.filter(item => {\n        if (item.meta && item.meta.hidden) {\n          return false\n        } else {\n          this.onlyOneChild = item\n          return true\n        }\n      })\n\n      if (showingChildren.length === 1) {\n        return true\n      }\n\n      if (showingChildren.length === 0) {\n        this.onlyOneChild = { ...parent, path: '', noShowingChildren: true }\n        return true\n      }\n\n      return false\n    },\n    resolvePath(routePath) {\n      if (this.isExternal(routePath)) {\n        return routePath\n      }\n      if (this.isExternal(this.basePath)) {\n        return this.basePath\n      }\n      return path.resolve(this.basePath, routePath)\n    },\n    isExternal(path) {\n      return /^(https?:|mailto:|tel:)/.test(path)\n    },\n    handleLink(item) {\n      const { redirect, path } = item\n      if (redirect) {\n        this.$router.push(redirect)\n        return\n      }\n      this.$router.push(path)\n    }\n  }\n}\n</script> "],"mappings":"AA2BA,OAAAA,IAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACAC,IAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;IACAC,QAAA;MACAH,IAAA,EAAAI,MAAA;MACAC,OAAA;IACA;EACA;EACAC,KAAA;IACA,KAAAC,YAAA;IACA;EACA;EACAC,OAAA;IACAC,mBAAAC,QAAA,OAAAC,MAAA;MACA,MAAAC,eAAA,GAAAF,QAAA,CAAAG,MAAA,CAAAd,IAAA;QACA,IAAAA,IAAA,CAAAe,IAAA,IAAAf,IAAA,CAAAe,IAAA,CAAAC,MAAA;UACA;QACA;UACA,KAAAR,YAAA,GAAAR,IAAA;UACA;QACA;MACA;MAEA,IAAAa,eAAA,CAAAI,MAAA;QACA;MACA;MAEA,IAAAJ,eAAA,CAAAI,MAAA;QACA,KAAAT,YAAA;UAAA,GAAAI,MAAA;UAAAf,IAAA;UAAAqB,iBAAA;QAAA;QACA;MACA;MAEA;IACA;IACAC,YAAAC,SAAA;MACA,SAAAC,UAAA,CAAAD,SAAA;QACA,OAAAA,SAAA;MACA;MACA,SAAAC,UAAA,MAAAjB,QAAA;QACA,YAAAA,QAAA;MACA;MACA,OAAAP,IAAA,CAAAyB,OAAA,MAAAlB,QAAA,EAAAgB,SAAA;IACA;IACAC,WAAAxB,IAAA;MACA,iCAAA0B,IAAA,CAAA1B,IAAA;IACA;IACA2B,WAAAxB,IAAA;MACA;QAAAyB,QAAA;QAAA5B;MAAA,IAAAG,IAAA;MACA,IAAAyB,QAAA;QACA,KAAAC,OAAA,CAAAC,IAAA,CAAAF,QAAA;QACA;MACA;MACA,KAAAC,OAAA,CAAAC,IAAA,CAAA9B,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}