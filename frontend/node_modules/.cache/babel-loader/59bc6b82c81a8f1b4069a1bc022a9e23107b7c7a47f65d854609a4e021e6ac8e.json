{"ast":null,"code":"import { login, register, getCurrentUser, updateCurrentUser, refreshToken } from '@/api/auth';\nimport { getToken, setToken, removeToken, setRefreshToken, getRefreshToken } from '@/utils/auth';\nconst state = {\n  token: getToken(),\n  refreshToken: getRefreshToken(),\n  userInfo: null,\n  isLoggedIn: false,\n  loading: false\n};\nconst mutations = {\n  SET_TOKEN: (state, token) => {\n    state.token = token;\n  },\n  SET_REFRESH_TOKEN: (state, refreshToken) => {\n    state.refreshToken = refreshToken;\n  },\n  SET_USER_INFO: (state, userInfo) => {\n    state.userInfo = userInfo;\n  },\n  SET_LOGGED_IN: (state, status) => {\n    state.isLoggedIn = status;\n  },\n  SET_LOADING: (state, loading) => {\n    state.loading = loading;\n  },\n  CLEAR_USER_DATA: state => {\n    state.token = null;\n    state.refreshToken = null;\n    state.userInfo = null;\n    state.isLoggedIn = false;\n  }\n};\nconst actions = {\n  // 用户登录\n  async login({\n    commit,\n    dispatch\n  }, userInfo) {\n    try {\n      commit('SET_LOADING', true);\n      const response = await login(userInfo);\n      const {\n        access_token,\n        refresh_token\n      } = response.data;\n      commit('SET_TOKEN', access_token);\n      commit('SET_REFRESH_TOKEN', refresh_token);\n      commit('SET_LOGGED_IN', true);\n      setToken(access_token);\n      setRefreshToken(refresh_token);\n\n      // 获取用户信息\n      await dispatch('getUserInfo');\n      return response;\n    } catch (error) {\n      console.error('登录失败:', error);\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  // 用户注册\n  async register({\n    commit\n  }, userInfo) {\n    try {\n      commit('SET_LOADING', true);\n      const response = await register(userInfo);\n      return response;\n    } catch (error) {\n      console.error('注册失败:', error);\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  // 获取用户信息\n  async getUserInfo({\n    commit,\n    state,\n    dispatch\n  }) {\n    try {\n      if (!state.token) {\n        throw new Error('未找到访问令牌');\n      }\n      const response = await getCurrentUser();\n      const userInfo = response.data;\n      commit('SET_USER_INFO', userInfo);\n      commit('SET_LOGGED_IN', true);\n      return userInfo;\n    } catch (error) {\n      console.error('获取用户信息失败:', error);\n      // 如果获取用户信息失败，可能是token过期，尝试刷新\n      if (error.response && error.response.status === 401) {\n        await dispatch('refreshUserToken');\n      }\n      throw error;\n    }\n  },\n  // 更新用户信息\n  async updateUserInfo({\n    commit\n  }, userInfo) {\n    try {\n      commit('SET_LOADING', true);\n      const response = await updateCurrentUser(userInfo);\n      const updatedUserInfo = response.data;\n      commit('SET_USER_INFO', updatedUserInfo);\n      return updatedUserInfo;\n    } catch (error) {\n      console.error('更新用户信息失败:', error);\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  // 刷新访问令牌\n  async refreshUserToken({\n    commit,\n    state,\n    dispatch\n  }) {\n    try {\n      if (!state.refreshToken) {\n        throw new Error('未找到刷新令牌');\n      }\n      const response = await refreshToken(state.refreshToken);\n      const {\n        access_token\n      } = response.data;\n      commit('SET_TOKEN', access_token);\n      setToken(access_token);\n      return access_token;\n    } catch (error) {\n      console.error('刷新令牌失败:', error);\n      // 刷新失败，清除所有认证信息\n      await dispatch('logout');\n      throw error;\n    }\n  },\n  // 用户登出\n  async logout({\n    commit\n  }) {\n    try {\n      commit('CLEAR_USER_DATA');\n      removeToken();\n      // 这里可以调用后端的登出接口（如果有的话）\n      // await logout()\n    } catch (error) {\n      console.error('登出失败:', error);\n    }\n  },\n  // 检查认证状态\n  async checkAuth({\n    commit,\n    state,\n    dispatch\n  }) {\n    try {\n      if (!state.token) {\n        return false;\n      }\n\n      // 尝试获取用户信息来验证token是否有效\n      await dispatch('getUserInfo');\n      return true;\n    } catch (error) {\n      console.error('认证检查失败:', error);\n      return false;\n    }\n  }\n};\nconst getters = {\n  token: state => state.token,\n  refreshToken: state => state.refreshToken,\n  userInfo: state => state.userInfo,\n  isLoggedIn: state => state.isLoggedIn,\n  loading: state => state.loading,\n  isAdmin: state => state.userInfo ? state.userInfo.is_admin : false,\n  username: state => state.userInfo ? state.userInfo.username : '',\n  email: state => state.userInfo ? state.userInfo.email : '',\n  fullName: state => state.userInfo ? state.userInfo.full_name : ''\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["login","register","getCurrentUser","updateCurrentUser","refreshToken","getToken","setToken","removeToken","setRefreshToken","getRefreshToken","state","token","userInfo","isLoggedIn","loading","mutations","SET_TOKEN","SET_REFRESH_TOKEN","SET_USER_INFO","SET_LOGGED_IN","status","SET_LOADING","CLEAR_USER_DATA","actions","commit","dispatch","response","access_token","refresh_token","data","error","console","getUserInfo","Error","updateUserInfo","updatedUserInfo","refreshUserToken","logout","checkAuth","getters","isAdmin","is_admin","username","email","fullName","full_name","namespaced"],"sources":["/Users/windwheel/Documents/gitrepo/train-storge-workflow/frontend/src/store/modules/user.js"],"sourcesContent":["import { login, register, getCurrentUser, updateCurrentUser, refreshToken } from '@/api/auth'\nimport { getToken, setToken, removeToken, setRefreshToken, getRefreshToken } from '@/utils/auth'\n\nconst state = {\n  token: getToken(),\n  refreshToken: getRefreshToken(),\n  userInfo: null,\n  isLoggedIn: false,\n  loading: false\n}\n\nconst mutations = {\n  SET_TOKEN: (state, token) => {\n    state.token = token\n  },\n  SET_REFRESH_TOKEN: (state, refreshToken) => {\n    state.refreshToken = refreshToken\n  },\n  SET_USER_INFO: (state, userInfo) => {\n    state.userInfo = userInfo\n  },\n  SET_LOGGED_IN: (state, status) => {\n    state.isLoggedIn = status\n  },\n  SET_LOADING: (state, loading) => {\n    state.loading = loading\n  },\n  CLEAR_USER_DATA: (state) => {\n    state.token = null\n    state.refreshToken = null\n    state.userInfo = null\n    state.isLoggedIn = false\n  }\n}\n\nconst actions = {\n  // 用户登录\n  async login({ commit, dispatch }, userInfo) {\n    try {\n      commit('SET_LOADING', true)\n      const response = await login(userInfo)\n      const { access_token, refresh_token } = response.data\n      \n      commit('SET_TOKEN', access_token)\n      commit('SET_REFRESH_TOKEN', refresh_token)\n      commit('SET_LOGGED_IN', true)\n      \n      setToken(access_token)\n      setRefreshToken(refresh_token)\n      \n      // 获取用户信息\n      await dispatch('getUserInfo')\n      \n      return response\n    } catch (error) {\n      console.error('登录失败:', error)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  // 用户注册\n  async register({ commit }, userInfo) {\n    try {\n      commit('SET_LOADING', true)\n      const response = await register(userInfo)\n      return response\n    } catch (error) {\n      console.error('注册失败:', error)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  // 获取用户信息\n  async getUserInfo({ commit, state, dispatch }) {\n    try {\n      if (!state.token) {\n        throw new Error('未找到访问令牌')\n      }\n      \n      const response = await getCurrentUser()\n      const userInfo = response.data\n      \n      commit('SET_USER_INFO', userInfo)\n      commit('SET_LOGGED_IN', true)\n      \n      return userInfo\n    } catch (error) {\n      console.error('获取用户信息失败:', error)\n      // 如果获取用户信息失败，可能是token过期，尝试刷新\n      if (error.response && error.response.status === 401) {\n        await dispatch('refreshUserToken')\n      }\n      throw error\n    }\n  },\n\n  // 更新用户信息\n  async updateUserInfo({ commit }, userInfo) {\n    try {\n      commit('SET_LOADING', true)\n      const response = await updateCurrentUser(userInfo)\n      const updatedUserInfo = response.data\n      \n      commit('SET_USER_INFO', updatedUserInfo)\n      return updatedUserInfo\n    } catch (error) {\n      console.error('更新用户信息失败:', error)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  // 刷新访问令牌\n  async refreshUserToken({ commit, state, dispatch }) {\n    try {\n      if (!state.refreshToken) {\n        throw new Error('未找到刷新令牌')\n      }\n      \n      const response = await refreshToken(state.refreshToken)\n      const { access_token } = response.data\n      \n      commit('SET_TOKEN', access_token)\n      setToken(access_token)\n      \n      return access_token\n    } catch (error) {\n      console.error('刷新令牌失败:', error)\n      // 刷新失败，清除所有认证信息\n      await dispatch('logout')\n      throw error\n    }\n  },\n\n  // 用户登出\n  async logout({ commit }) {\n    try {\n      commit('CLEAR_USER_DATA')\n      removeToken()\n      // 这里可以调用后端的登出接口（如果有的话）\n      // await logout()\n    } catch (error) {\n      console.error('登出失败:', error)\n    }\n  },\n\n  // 检查认证状态\n  async checkAuth({ commit, state, dispatch }) {\n    try {\n      if (!state.token) {\n        return false\n      }\n      \n      // 尝试获取用户信息来验证token是否有效\n      await dispatch('getUserInfo')\n      return true\n    } catch (error) {\n      console.error('认证检查失败:', error)\n      return false\n    }\n  }\n}\n\nconst getters = {\n  token: state => state.token,\n  refreshToken: state => state.refreshToken,\n  userInfo: state => state.userInfo,\n  isLoggedIn: state => state.isLoggedIn,\n  loading: state => state.loading,\n  isAdmin: state => state.userInfo ? state.userInfo.is_admin : false,\n  username: state => state.userInfo ? state.userInfo.username : '',\n  email: state => state.userInfo ? state.userInfo.email : '',\n  fullName: state => state.userInfo ? state.userInfo.full_name : ''\n}\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}